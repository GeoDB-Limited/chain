syntax = "proto3";
package mint;

option go_package = "github.com/GeoDB-Limited/odin-core/x/mint/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "mint/mint.proto";
import "mint/params.proto";

// Query defines the gRPC querier service.
service Query {
  // Params returns the total set of minting parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mint/params";
  }

  rpc Inflation(QueryInflationRequest) returns (QueryInflationResponse) {
    option (google.api.http).get = "/mint/parameters";
  }

  rpc AnnualProvisions(QueryAnnualProvisionsRequest) returns (QueryAnnualProvisionsResponse) {
    option (google.api.http).get = "/mint/annual_provisions";
  }

  rpc EthIntegrationAddress(QueryEthIntegrationAddressRequest) returns (QueryEthIntegrationAddressResponse) {
    option (google.api.http).get = "/mint/eth_integration_address";
  }

  rpc TreasuryPool(QueryTreasuryPoolRequest) returns (QueryTreasuryPoolResponse) {
    option (google.api.http).get = "/mint/treasury_pool";
  }
}

message QueryParamsRequest{}
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryInflationRequest {}
message QueryInflationResponse {
  string inflation = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message QueryAnnualProvisionsRequest {}
message QueryAnnualProvisionsResponse {
  string annual_provisions = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message QueryEthIntegrationAddressRequest {}
message QueryEthIntegrationAddressResponse {
  string eth_integration_address = 1;
}

message QueryTreasuryPoolRequest {}
message QueryTreasuryPoolResponse {
  repeated cosmos.base.v1beta1.Coin treasury_pool = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}
