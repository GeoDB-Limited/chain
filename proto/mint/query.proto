syntax = "proto3";
package mint;

option go_package = "github.com/GeoDB-Limited/odin-core/x/mint/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/v1beta1/balance.proto";
import "mint/mint.proto";
import "mint/params.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/validator.proto";


// Query defines the gRPC querier service.
service Query {
  // Params returns the total set of minting parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mint/params";
  }
  // Inflation returns current inflation.
  rpc Inflation(QueryInflationRequest) returns (QueryInflationResponse) {
    option (google.api.http).get = "/mint/parameters";
  }
  // Inflation returns current annual provisions.
  rpc AnnualProvisions(QueryAnnualProvisionsRequest)
      returns (QueryAnnualProvisionsResponse) {
    option (google.api.http).get = "/mint/annual_provisions";
  }
  // Inflation returns integration address.
  rpc IntegrationAddress(QueryIntegrationAddressRequest)
      returns (QueryIntegrationAddressResponse) {
    option (google.api.http).get = "/mint/integration_addresses/{network_name}";
  }
  // Inflation returns current treasury pool.
  rpc TreasuryPool(QueryTreasuryPoolRequest)
      returns (QueryTreasuryPoolResponse) {
    option (google.api.http).get = "/mint/treasury_pool";
  }

  rpc OdinInfo(QueryOdinInfoRequest) returns (QueryOdinInfoResponse) {
      option (google.api.http).get = "/mint/odin_info";
      // option (google.api.http).get = "/telemetry/top_balances";
      // option (google.api.http).post = "/oracle/data_providers_pool";
  }
}

// QueryParamsRequest is request type for the Query/QueryParams RPC
// method.
message QueryParamsRequest {}
// QueryParamsResponse is response type for the Query/QueryParams RPC
// method.
message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryInflationRequest is request type for the Query/QueryInflation RPC
// method.
message QueryInflationRequest {}
// QueryInflationResponse is response type for the Query/QueryInflation RPC
// method.
message QueryInflationResponse {
  string inflation = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// QueryAnnualProvisionsRequest is request type for the
// Query/QueryAnnualProvisions RPC method.
message QueryAnnualProvisionsRequest {}
// QueryAnnualProvisionsResponse is response type for the
// Query/QueryAnnualProvisions RPC method.
message QueryAnnualProvisionsResponse {
  string annual_provisions = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// QueryIntegrationAddressRequest is request type for the
// Query/QueryEthIntegrationAddress RPC method.
message QueryIntegrationAddressRequest {
  string network_name = 1;
}
// QueryIntegrationAddressResponse is response type for the
// Query/QueryEthIntegrationAddress RPC method.
message QueryIntegrationAddressResponse {
  string integration_address = 1;
}

// QueryTreasuryPoolRequest is request type for the Query/QueryTreasuryPool RPC
// method.
message QueryTreasuryPoolRequest {}
// QueryTreasuryPoolResponse is response type for the Query/QueryTreasuryPool
// RPC method.
message QueryTreasuryPoolResponse {
  repeated cosmos.base.v1beta1.Coin treasury_pool = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// QueryOdinInfoRequest is request type for Query/QueryOdinInfoRequest RPC method.
message QueryOdinInfoRequest {
  string status = 1;
  
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryOdinInfoResponse is response type for Query/QueryOdinInfoResponse RPC method.
message QueryOdinInfoResponse {
  string total_supply = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  repeated cosmos.base.v1beta1.Balance balances = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/x/bank/types.Balance",
    (gogoproto.nullable) = false
  ];

  repeated cosmos.base.v1beta1.DecCoin community_pool = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", 
    (gogoproto.nullable) = false
  ];

  repeated cosmos.base.v1beta1.Coin treasury_pool = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  
  repeated cosmos.base.v1beta1.Coin data_providers_pool = 5 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message QueryExtendedValidatorsRequest {
  string status = 1;
  
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryExtendedValidatorsResponse {
  repeated cosmos.base.v1beta1.Validator validators = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/x/staking/types.Validator",
    (gogoproto.nullable) = false
  ];

  repeated cosmos.base.v1beta1.Balance balances = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/x/bank/types.Balance",
    (gogoproto.nullable) = false
  ];

  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}